import type { FormDesign, FormDesignOption } from '@giantgo-render/tokens';
declare const _sfc_main: import("vue").DefineComponent<Readonly<import("vue").ComponentPropsOptions<{
    [x: string]: unknown;
}>>, {
    props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<Readonly<import("vue").ComponentPropsOptions<{
        [x: string]: unknown;
    }>>>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
    state: {
        formDesign: {
            name: string;
            component: string;
            uuid: string;
            options: {
                [x: string]: any;
                activeColor?: string | undefined;
                activeText?: string | undefined;
                allowHalf?: boolean | undefined;
                backgroundColor?: string | undefined;
                buttonText?: string | undefined;
                clearable?: boolean | undefined;
                collapseTags?: boolean | undefined;
                content?: string | undefined;
                defaultValue?: any;
                disabled?: boolean | undefined;
                expandTrigger?: string | undefined;
                fileSuffix?: string[] | undefined;
                filterable?: boolean | undefined;
                format?: string | undefined;
                gutter?: number | undefined;
                height?: string | undefined;
                hidden?: boolean | undefined;
                hideRequiredAsterisk?: boolean | undefined;
                imageSuffix?: string[] | undefined;
                inactiveColor?: string | undefined;
                inactiveText?: string | undefined;
                inline?: boolean | undefined;
                key?: string | undefined;
                labelPosition?: "left" | "right" | "top" | undefined;
                labelWidth?: string | undefined;
                label?: string | undefined;
                limit?: number | undefined;
                lineHeight?: string | undefined;
                max?: number | undefined;
                maxlength?: number | undefined;
                min?: number | undefined;
                multipleLimit?: number | undefined;
                multiple?: boolean | undefined;
                noDataText?: string | undefined;
                noMatchText?: string | undefined;
                options?: {
                    type: string;
                    remote: string;
                    items: {
                        label: string;
                        value: string;
                    }[];
                } | undefined;
                padding?: string | undefined;
                penColor?: string | undefined;
                placeholder?: string | undefined;
                prefixIcon?: string | undefined;
                remotes?: Record<string, import("@giantgo-render/tokens").Remote> | undefined;
                richContent?: string | undefined;
                rows?: number | undefined;
                rules?: [required: {
                    required: boolean;
                    message: string;
                    trigger: string;
                }, ...prop: {
                    pattern: string;
                    message: string;
                    trigger: string;
                }[]] | undefined;
                shadow?: string | undefined;
                showAlpha?: boolean | undefined;
                showFileList?: boolean | undefined;
                showInput?: boolean | undefined;
                showPassword?: boolean | undefined;
                showStops?: boolean | undefined;
                showToolTip?: boolean | undefined;
                showWordLimit?: boolean | undefined;
                size?: "" | "default" | "small" | "large" | undefined;
                statusIcon?: boolean | undefined;
                step?: number | undefined;
                suffixIcon?: string | undefined;
                tabPosition?: string | undefined;
                tabType?: string | undefined;
                tip?: string | undefined;
                uploadData?: any;
                uploadHeaders?: Record<string, string> | undefined;
                uploadName?: string | undefined;
                uploadSize?: string | undefined;
                uploadUrl?: string | undefined;
                width?: string | undefined;
            };
            items?: any[] | undefined;
        };
        selected: {
            name: string;
            component: string;
            uuid: string;
            options: {
                [x: string]: any;
                activeColor?: string | undefined;
                activeText?: string | undefined;
                allowHalf?: boolean | undefined;
                backgroundColor?: string | undefined;
                buttonText?: string | undefined;
                clearable?: boolean | undefined;
                collapseTags?: boolean | undefined;
                content?: string | undefined;
                defaultValue?: any;
                disabled?: boolean | undefined;
                expandTrigger?: string | undefined;
                fileSuffix?: string[] | undefined;
                filterable?: boolean | undefined;
                format?: string | undefined;
                gutter?: number | undefined;
                height?: string | undefined;
                hidden?: boolean | undefined;
                hideRequiredAsterisk?: boolean | undefined;
                imageSuffix?: string[] | undefined;
                inactiveColor?: string | undefined;
                inactiveText?: string | undefined;
                inline?: boolean | undefined;
                key?: string | undefined;
                labelPosition?: "left" | "right" | "top" | undefined;
                labelWidth?: string | undefined;
                label?: string | undefined;
                limit?: number | undefined;
                lineHeight?: string | undefined;
                max?: number | undefined;
                maxlength?: number | undefined;
                min?: number | undefined;
                multipleLimit?: number | undefined;
                multiple?: boolean | undefined;
                noDataText?: string | undefined;
                noMatchText?: string | undefined;
                options?: {
                    type: string;
                    remote: string;
                    items: {
                        label: string;
                        value: string;
                    }[];
                } | undefined;
                padding?: string | undefined;
                penColor?: string | undefined;
                placeholder?: string | undefined;
                prefixIcon?: string | undefined;
                remotes?: Record<string, import("@giantgo-render/tokens").Remote> | undefined;
                richContent?: string | undefined;
                rows?: number | undefined;
                rules?: [required: {
                    required: boolean;
                    message: string;
                    trigger: string;
                }, ...prop: {
                    pattern: string;
                    message: string;
                    trigger: string;
                }[]] | undefined;
                shadow?: string | undefined;
                showAlpha?: boolean | undefined;
                showFileList?: boolean | undefined;
                showInput?: boolean | undefined;
                showPassword?: boolean | undefined;
                showStops?: boolean | undefined;
                showToolTip?: boolean | undefined;
                showWordLimit?: boolean | undefined;
                size?: "" | "default" | "small" | "large" | undefined;
                statusIcon?: boolean | undefined;
                step?: number | undefined;
                suffixIcon?: string | undefined;
                tabPosition?: string | undefined;
                tabType?: string | undefined;
                tip?: string | undefined;
                uploadData?: any;
                uploadHeaders?: Record<string, string> | undefined;
                uploadName?: string | undefined;
                uploadSize?: string | undefined;
                uploadUrl?: string | undefined;
                width?: string | undefined;
            };
            items?: any[] | undefined;
        };
        cached: {
            name: string;
            component: string;
            uuid: string;
            options: {
                [x: string]: any;
                activeColor?: string | undefined;
                activeText?: string | undefined;
                allowHalf?: boolean | undefined;
                backgroundColor?: string | undefined;
                buttonText?: string | undefined;
                clearable?: boolean | undefined;
                collapseTags?: boolean | undefined;
                content?: string | undefined;
                defaultValue?: any;
                disabled?: boolean | undefined;
                expandTrigger?: string | undefined;
                fileSuffix?: string[] | undefined;
                filterable?: boolean | undefined;
                format?: string | undefined;
                gutter?: number | undefined;
                height?: string | undefined;
                hidden?: boolean | undefined;
                hideRequiredAsterisk?: boolean | undefined;
                imageSuffix?: string[] | undefined;
                inactiveColor?: string | undefined;
                inactiveText?: string | undefined;
                inline?: boolean | undefined;
                key?: string | undefined;
                labelPosition?: "left" | "right" | "top" | undefined;
                labelWidth?: string | undefined;
                label?: string | undefined;
                limit?: number | undefined;
                lineHeight?: string | undefined;
                max?: number | undefined;
                maxlength?: number | undefined;
                min?: number | undefined;
                multipleLimit?: number | undefined;
                multiple?: boolean | undefined;
                noDataText?: string | undefined;
                noMatchText?: string | undefined;
                options?: {
                    type: string;
                    remote: string;
                    items: {
                        label: string;
                        value: string;
                    }[];
                } | undefined;
                padding?: string | undefined;
                penColor?: string | undefined;
                placeholder?: string | undefined;
                prefixIcon?: string | undefined;
                remotes?: Record<string, import("@giantgo-render/tokens").Remote> | undefined;
                richContent?: string | undefined;
                rows?: number | undefined;
                rules?: [required: {
                    required: boolean;
                    message: string;
                    trigger: string;
                }, ...prop: {
                    pattern: string;
                    message: string;
                    trigger: string;
                }[]] | undefined;
                shadow?: string | undefined;
                showAlpha?: boolean | undefined;
                showFileList?: boolean | undefined;
                showInput?: boolean | undefined;
                showPassword?: boolean | undefined;
                showStops?: boolean | undefined;
                showToolTip?: boolean | undefined;
                showWordLimit?: boolean | undefined;
                size?: "" | "default" | "small" | "large" | undefined;
                statusIcon?: boolean | undefined;
                step?: number | undefined;
                suffixIcon?: string | undefined;
                tabPosition?: string | undefined;
                tabType?: string | undefined;
                tip?: string | undefined;
                uploadData?: any;
                uploadHeaders?: Record<string, string> | undefined;
                uploadName?: string | undefined;
                uploadSize?: string | undefined;
                uploadUrl?: string | undefined;
                width?: string | undefined;
            };
            items?: any[] | undefined;
        }[];
        current: number;
    };
    groups: import("vue").Ref<{
        name: string;
        components: {
            name: string;
            component: string;
            uuid: string;
            options: {
                [x: string]: any;
                activeColor?: string | undefined;
                activeText?: string | undefined;
                allowHalf?: boolean | undefined;
                backgroundColor?: string | undefined;
                buttonText?: string | undefined;
                clearable?: boolean | undefined;
                collapseTags?: boolean | undefined;
                content?: string | undefined;
                defaultValue?: any;
                disabled?: boolean | undefined;
                expandTrigger?: string | undefined;
                fileSuffix?: string[] | undefined;
                filterable?: boolean | undefined;
                format?: string | undefined;
                gutter?: number | undefined;
                height?: string | undefined;
                hidden?: boolean | undefined;
                hideRequiredAsterisk?: boolean | undefined;
                imageSuffix?: string[] | undefined;
                inactiveColor?: string | undefined;
                inactiveText?: string | undefined;
                inline?: boolean | undefined;
                key?: string | undefined;
                labelPosition?: "left" | "right" | "top" | undefined;
                labelWidth?: string | undefined;
                label?: string | undefined;
                limit?: number | undefined;
                lineHeight?: string | undefined;
                max?: number | undefined;
                maxlength?: number | undefined;
                min?: number | undefined;
                multipleLimit?: number | undefined;
                multiple?: boolean | undefined;
                noDataText?: string | undefined;
                noMatchText?: string | undefined;
                options?: {
                    type: string;
                    remote: string;
                    items: {
                        label: string;
                        value: string;
                    }[];
                } | undefined;
                padding?: string | undefined;
                penColor?: string | undefined;
                placeholder?: string | undefined;
                prefixIcon?: string | undefined;
                remotes?: Record<string, import("@giantgo-render/tokens").Remote> | undefined;
                richContent?: string | undefined;
                rows?: number | undefined;
                rules?: [required: {
                    required: boolean;
                    message: string;
                    trigger: string;
                }, ...prop: {
                    pattern: string;
                    message: string;
                    trigger: string;
                }[]] | undefined;
                shadow?: string | undefined;
                showAlpha?: boolean | undefined;
                showFileList?: boolean | undefined;
                showInput?: boolean | undefined;
                showPassword?: boolean | undefined;
                showStops?: boolean | undefined;
                showToolTip?: boolean | undefined;
                showWordLimit?: boolean | undefined;
                size?: "" | "default" | "small" | "large" | undefined;
                statusIcon?: boolean | undefined;
                step?: number | undefined;
                suffixIcon?: string | undefined;
                tabPosition?: string | undefined;
                tabType?: string | undefined;
                tip?: string | undefined;
                uploadData?: any;
                uploadHeaders?: Record<string, string> | undefined;
                uploadName?: string | undefined;
                uploadSize?: string | undefined;
                uploadUrl?: string | undefined;
                width?: string | undefined;
            };
            items?: any[] | undefined;
        }[];
        order: number;
    }[]>;
    getUuid: (items: FormDesign[] | undefined, result: Array<string>) => string[];
    uuids: import("vue").ComputedRef<string[]>;
    allComponents: import("vue").ComputedRef<FormDesign[]>;
    query: (items: FormDesign[] | undefined, uuid: string) => FormDesign | undefined;
    copy: (items: FormDesign[] | undefined, uuid: string) => FormDesign | undefined;
    remove: (items: FormDesign[] | undefined, uuid: string) => boolean;
    setSelected: (uuid: string) => void;
    updateFormItem: ({ uuid, items }: {
        uuid: string;
        items: Array<FormDesign>;
    }) => void;
    updateFormOption: ({ uuid, key, value }: {
        uuid: string;
        key: keyof FormDesignOption;
        value: any;
    }) => void;
    updateSelectedFormOption: ({ key, value }: {
        key: keyof FormDesignOption;
        value: any;
    }) => void;
    switchInterpolate: (key: keyof FormDesignOption) => void;
    copyFormItem: (uuid: string) => void;
    removeFormItem: (uuid: string) => void;
    revoke: () => void;
    forward: () => void;
    addCache: () => void;
    init: (config?: FormDesign | undefined) => void;
    clear: () => void;
    register: (name?: string, components?: Array<FormDesign>, order?: number) => void;
    getJson: () => {
        name: string;
        component: string;
        uuid: string;
        options: {
            [x: string]: any;
            activeColor?: string | undefined;
            activeText?: string | undefined;
            allowHalf?: boolean | undefined;
            backgroundColor?: string | undefined;
            buttonText?: string | undefined;
            clearable?: boolean | undefined;
            collapseTags?: boolean | undefined;
            content?: string | undefined;
            defaultValue?: any;
            disabled?: boolean | undefined;
            expandTrigger?: string | undefined;
            fileSuffix?: string[] | undefined;
            filterable?: boolean | undefined;
            format?: string | undefined;
            gutter?: number | undefined;
            height?: string | undefined;
            hidden?: boolean | undefined;
            hideRequiredAsterisk?: boolean | undefined;
            imageSuffix?: string[] | undefined;
            inactiveColor?: string | undefined;
            inactiveText?: string | undefined;
            inline?: boolean | undefined;
            key?: string | undefined;
            labelPosition?: "left" | "right" | "top" | undefined;
            labelWidth?: string | undefined;
            label?: string | undefined;
            limit?: number | undefined;
            lineHeight?: string | undefined;
            max?: number | undefined;
            maxlength?: number | undefined;
            min?: number | undefined;
            multipleLimit?: number | undefined;
            multiple?: boolean | undefined;
            noDataText?: string | undefined;
            noMatchText?: string | undefined;
            options?: {
                type: string;
                remote: string;
                items: {
                    label: string;
                    value: string;
                }[];
            } | undefined;
            padding?: string | undefined;
            penColor?: string | undefined;
            placeholder?: string | undefined;
            prefixIcon?: string | undefined;
            remotes?: Record<string, import("@giantgo-render/tokens").Remote> | undefined;
            richContent?: string | undefined;
            rows?: number | undefined;
            rules?: [required: {
                required: boolean;
                message: string;
                trigger: string;
            }, ...prop: {
                pattern: string;
                message: string;
                trigger: string;
            }[]] | undefined;
            shadow?: string | undefined;
            showAlpha?: boolean | undefined;
            showFileList?: boolean | undefined;
            showInput?: boolean | undefined;
            showPassword?: boolean | undefined;
            showStops?: boolean | undefined;
            showToolTip?: boolean | undefined;
            showWordLimit?: boolean | undefined;
            size?: "" | "default" | "small" | "large" | undefined;
            statusIcon?: boolean | undefined;
            step?: number | undefined;
            suffixIcon?: string | undefined;
            tabPosition?: string | undefined;
            tabType?: string | undefined;
            tip?: string | undefined;
            uploadData?: any;
            uploadHeaders?: Record<string, string> | undefined;
            uploadName?: string | undefined;
            uploadSize?: string | undefined;
            uploadUrl?: string | undefined;
            width?: string | undefined;
        };
        items?: any[] | undefined;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, readonly string[] | Readonly<import("vue").ExtractPropTypes<Readonly<import("vue").ComponentObjectPropsOptions<{
    [x: string]: unknown;
}>>>>, {
    [x: number]: string;
} | {}>;
export default _sfc_main;
